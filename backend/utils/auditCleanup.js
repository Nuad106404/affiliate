const AuditLog = require('../models/AuditLog');

/**
 * Manual cleanup utility for audit logs
 * Removes audit logs older than specified days
 */
class AuditCleanup {
  
  /**
   * Clean up audit logs older than specified days (MANUAL ONLY)
   * @param {number} days - Number of days to retain (default: 30)
   * @returns {Object} Cleanup result
   */
  static async cleanupOldLogs(days = 30) {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      
      console.log(`üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ ${days} ‡∏ß‡∏±‡∏ô...`);
      console.log(`üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏Ç‡∏≤‡∏î: ${cutoffDate.toISOString()}`);
      
      const result = await AuditLog.deleteMany({
        createdAt: { $lt: cutoffDate }
      });
      
      console.log(`‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏•‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${result.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      return {
        success: true,
        deletedCount: result.deletedCount,
        cutoffDate: cutoffDate.toISOString(),
        message: `‡∏•‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${result.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ ${days} ‡∏ß‡∏±‡∏ô`
      };
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:', error);
      return {
        success: false,
        error: error.message,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'
      };
    }
  }
  
  /**
   * Get statistics about audit logs
   * @returns {Object} Statistics
   */
  static async getLogStatistics() {
    try {
      const now = new Date();
      const thirtyDaysAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000));
      const sevenDaysAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));
      const oneDayAgo = new Date(now.getTime() - (24 * 60 * 60 * 1000));
      
      const [
        totalLogs,
        logsLast30Days,
        logsLast7Days,
        logsLast24Hours,
        oldLogs
      ] = await Promise.all([
        AuditLog.countDocuments(),
        AuditLog.countDocuments({ createdAt: { $gte: thirtyDaysAgo } }),
        AuditLog.countDocuments({ createdAt: { $gte: sevenDaysAgo } }),
        AuditLog.countDocuments({ createdAt: { $gte: oneDayAgo } }),
        AuditLog.countDocuments({ createdAt: { $lt: thirtyDaysAgo } })
      ]);
      
      return {
        totalLogs,
        logsLast30Days,
        logsLast7Days,
        logsLast24Hours,
        oldLogs,
        retentionPolicy: '‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£ (Manual Cleanup Only)',
        lastUpdated: now.toISOString()
      };
      
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:', error);
      throw error;
    }
  }
  
  /**
   * Clean up logs by severity level
   * @param {string} severity - Severity level to clean up
   * @param {number} days - Days to retain
   */
  static async cleanupBySeverity(severity, days = 7) {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      
      const result = await AuditLog.deleteMany({
        severity: severity,
        createdAt: { $lt: cutoffDate }
      });
      
      console.log(`üßπ ‡∏•‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö ${severity} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${result.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      return {
        success: true,
        deletedCount: result.deletedCount,
        severity,
        days,
        message: `‡∏•‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö ${severity} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${result.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ ${days} ‡∏ß‡∏±‡∏ô`
      };
      
    } catch (error) {
      console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö ${severity}:`, error);
      throw error;
    }
  }
}

module.exports = AuditCleanup;
